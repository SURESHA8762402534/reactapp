{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","react_default","a","createElement","className","id","heading","para","Component","App","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4BeA,qBAxBb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAON,OADAO,QAAQC,IAAIL,KAAKH,OAEfS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIE,GAAG,WAAWV,KAAKH,MAAMc,SAC7BL,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQV,KAAKH,MAAMe,cAZdC,cC2DJC,cA1Db,SAAAA,IAAc,OAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,GAAAhB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,6EAIZ,OACEM,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,GAAG,MAAP,sBACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACO,EAAD,CACAJ,QAAQ,YACRC,KAAK,uZAKbN,EAAAC,EAAAC,cAACO,EAAD,CACQJ,QAAQ,YACRC,KAAK,uZAKbN,EAAAC,EAAAC,cAACO,EAAD,CACQJ,QAAQ,YACRC,KAAK,uZAKbN,EAAAC,EAAAC,cAACO,EAAD,CACQJ,QAAQ,YACRC,KAAK,gaAjCKC,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68a313e3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  //   props = {name: 'geekster', age: 26, YOE: 10}\r\n\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 id=\"heading\">{this.props.heading}</h1>\r\n        <p id=\"para\">{this.props.para}</p>\r\n        {/* <p>my age is {this.props.age}</p>\r\n        <p>my years of exp is {this.props.YOE}</p>\r\n        <p>hi {this.props.geek}</p>\r\n\r\n        <p>hello {this.props.hello}</p>\r\n\r\n        <hr /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\nimport Card from \"./Card.js\";\n\nclass App extends Component {\n  constructor(){\n    super();\n  }\n  render() {\n    return (\n      <div>\n      <h1 id=\"mh\">my first React app</h1>\n      <div className=\"App\">\n        \n        <Card\n        heading=\"heading 1\"\n        para=\"reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\App.js\n        * E:\\reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\card.js\"\n        />\n\n        \n<Card\n        heading=\"heading 2\"\n        para=\"reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\App.js\n        * E:\\reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\card.js\"\n        />\n\n        \n<Card\n        heading=\"heading 3\"\n        para=\"reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\App.js\n        * E:\\reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\card.js\"\n        />\n\n        \n<Card\n        heading=\"heading 4\"\n        para=\"reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\App.js\n        * E:\\reactdevlop\\secondapp\\node_modules\\babel-loader\\lib\\index.js??ref--6-oneOf-1!E:\\reactdevlop\\secondapp\\node_modules\\eslint-loader\\index.js??ref--5-0!E:\\reactdevlop\\secondapp\\src\\card.js\"\n        />\n        \n        {/* <Card\n          name=\"geekster\"\n          age={26}\n          YOE={10}\n          geek=\"geekster\"\n          hello=\"kjnasiansian\"\n        />\n        <Card name=\"geek\" age={22} YOE={100000} geek=\"abhishek\"  />\n        <Card name=\"suresha\"\n        age=\"26\"\n        YOE=\"15\"\n        geek=\"dhgjdhghi\"\n        hello=\"uiwhfiuhfiu\"\n        /> */}\n      </div>\n      </div>\n    );\n  }\n}\n\n// new Card(\"geekster\", age:26, YOE:10)\n\nexport default App;\n\n// JSX = JS XML\n\n// {firstTeam: \"MIA\" ; secondTeam : \"BOS\"}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}